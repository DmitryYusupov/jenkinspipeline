@Library('global_libs') _
import pipeline.configreader.ConfigReader
import pipeline.stages.common.stage.PipelineContext

node {
    def pipelineContext = null
    try {
        def configs = ConfigReader.parsePipelineConfig("C:\\Users\\Dmitry_Yusupov\\Desktop\\Jenkins_pipeline\\jenkinspipeline\\projects\\Shop\\pipeline.xml")
        pipelineContext = new PipelineContext()
        pipelineContext.globalPipelineConfigs = configs.globalPipelineConfigs

       //stageDockerise.deleteImagesIfNumberOfStoredImagesHasExpired(1, "my-image","env1_27","env1_")
        javaUtils.setJavaHome("Java_11")
        //---checkout----
        stageCheckout.doCheckout(configs.checkoutStageConfig, pipelineContext)

        //---stage build----
        stageBuild.doBuild(configs.buildStageConfig, pipelineContext)

        //--stage integration tests----
        if (configs.integrationTestsStageConfig != null) {
          //  stageIntegrationTests.doIntegrationTests(configs.integrationTestsStageConfig, pipelineContext)
        }

        //--stage dockerize----
        if (configs.dockeriseStageConfig != null) {
            stageDockerise.doContainerisation(configs.dockeriseStageConfig, pipelineContext)
         //   stageDockerise.revertStageChanges(null, pipelineContext)
        }
    } catch (Exception e) {
        //exceptionHandler.handleException(e, pipelineContext)
        currentBuild.result = 'FAILURE'
    }

}
